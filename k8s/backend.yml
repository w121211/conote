apiVersion: v1
kind: Service
metadata:
  name: conote-backend
  labels:
    app: conote
    tier: backend
spec:
  type: ClusterIP
  selector:
    app: conote
    tier: backend
  ports:
    - port: 4000
      targetPort: http-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conote-backend
  labels:
    app: conote
    tier: backend
spec:
  replicas: 1 # No. of replicas/pods to run in this deployment
  selector:
    matchLabels: # The deployment applies to any pods mayching the specified labels
      app: conote
      tier: backend
  template: # Template for creating the pods in this deployment
    metadata:
      labels: # Labels that will be applied to each Pod in this deployment
        app: conote
        tier: backend
    spec: # Spec for the containers that will be run in the Pods
      initContainers:
        - name: init-db-ready
          image: postgres:13.2-alpine
          command: ['/bin/sh', '-c']
          args:
            - until (pg_isready -h conote-postgres -p 5432 -U postgresuser) do echo "Waiting for postgres at $DATABASE_URL"; sleep 2; done
          env:
            - name: POSTGRES_PASSWORD # postgres-image require a value
              value: 'password'
        # - name: init-db-migrate
        #   image: conote-backend
        #   command: ['yarn', 'migrate']
        #   env:
        #     - name: DATABASE_URL
        #       valueFrom:
        #         secretKeyRef:
        #           name: postgres-database-url
        #           key: url
      containers:
        - name: backend
          image: conote-backend
          # command: ['yarn', 'start']
          command: ['/bin/sh', '-c']
          args: ['yarn run migrate && yarn run seed:fromfile && yarn run start']
          ports:
            - name: http-server
              containerPort: 4000 # The port that the container exposes
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: postgres-database-url
                  key: url
          #   - name: SPRING_DATASOURCE_USERNAME # Name of the environment variable
          #     valueFrom: # Get the value of environment variable from kubernetes secrets
          #       secretKeyRef:
          #         name: mysql-user-pass
          #         key: username
          #   - name: SPRING_DATASOURCE_PASSWORD
          #     valueFrom:
          #       secretKeyRef:
          #         name: mysql-user-pass
          #         key: password
