# See
# - https://github.com/Azure-Samples/payara-on-aks/blob/main/payara-cafe.yml
# - https://github.com/GoogleCloudPlatform/cloud-code-samples/blob/master/nodejs/nodejs-guestbook/kubernetes-manifests/guestbook-backend.deployment.yaml
# - https://github.com/GoogleCloudPlatform/solutions-modern-cicd-anthos/blob/master/starter-repos/shared-kustomize-bases/online-boutique/emailservice.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: conote-webapp
spec:
  selector:
    matchLabels:
      app: conote-webapp
  replicas: 1 # No. of replicas/pods to run in this deployment
  template:
    metadata:
      labels:
        app: conote-webapp
    spec:
      # initContainers:
      #   - name: init-db-ready
      #     image: postgres:11-alpine
      #     command: ['/bin/sh', '-c']
      #     args:
      #       - until (pg_isready -h $PG_HOST -p 5432 -U $PG_USER) do echo "Waiting for postgres at $DATABASE_URL"; sleep 2; done
      #     env:
      #       - name: POSTGRES_PASSWORD # postgres-image require a value
      #         value: 'a_dummy_value'
      #       - name: PG_HOST
      #         value: 'postgres-release-postgresql'
      #       - name: PG_USER
      #         value: 'postgres'
      containers:
        - name: conote-webapp-container
          image: conote-webapp-image
          envFrom:
            - secretRef:
                name: conote-webapp-envlocal
          env:
            - name: ENVIRONMENT
              value: dev
            - name: PORT
              value: '3000'
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: conote-release-postgresql
                  key: password
            - name: APP_DATABASE_URL
              value: 'postgresql://postgresuser:$(POSTGRES_PASSWORD)@conote-release-postgresql:5432/prisma?schema=public'
          ports:
            - containerPort: 3000 # The port that the container exposes
          # command: ['/bin/sh']
          # args: ['-c', 'yarn run start']

          # readinessProbe:
          #   initialDelaySeconds: 10
          #   httpGet:
          #     path: '/_healthz'
          #     port: 8080
          #     httpHeaders:
          #       - name: 'Cookie'
          #         value: 'shop_session-id=x-readiness-probe'

          # readinessProbe:
          #   periodSeconds: 5
          #   exec:
          #     command: ['/bin/grpc_health_probe', '-addr=:8080']

          # livenessProbe:
          #   periodSeconds: 5
          #   exec:
          #     command: ["/bin/grpc_health_probe", "-addr=:8080"]

          # resources:
          #   requests:
          #     cpu: 100m
          #     memory: 64Mi
          #   limits:
          #     cpu: 200m
          #     memory: 128Mi
      serviceAccountName: storage-api-consumer-ksa
      nodeSelector:
        iam.gke.io/gke-metadata-server-enabled: 'true'
---
apiVersion: v1
kind: Service
metadata:
  name: conote-webapp-service
spec:
  type: ClusterIP
  selector:
    app: conote-webapp
  ports:
    - protocol: TCP
      port: 50000
      targetPort: 3000
