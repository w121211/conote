// Ref:
// - https://github.com/discourse/discourse/tree/main/app/models
//

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Author {
  id        String   @id @default(cuid())
  name      String   @unique
  meta      Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  links     Link[]
  rates     Rate[]
}

model Bullet {
  id          String        @id @default(cuid())
  cardState   CardState     @relation(fields: [cardStateId], references: [id])
  cardStateId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  emojis      BulletEmoji[]
}

model BulletEmoji {
  id        String            @id @default(cuid())
  bullet    Bullet            @relation(fields: [bulletId], references: [id])
  bulletId  String
  code      EmojiCode
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  count     BulletEmojiCount?
  likes     BulletEmojiLike[]

  @@unique([bulletId, code])
}

model BulletEmojiCount {
  id            Int         @id @default(autoincrement())
  bulletEmoji   BulletEmoji @relation(fields: [bulletEmojiId], references: [id])
  bulletEmojiId String      @unique
  nViews        Int         @default(0)
  nUps          Int         @default(0)
  nDowns        Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model BulletEmojiLike {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  bulletEmoji   BulletEmoji @relation(fields: [bulletEmojiId], references: [id])
  bulletEmojiId String
  choice        LikeChoice
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, bulletEmojiId])
}

model Card {
  id        String      @id @default(cuid())
  sym       Sym         @relation(fields: [symId], references: [id])
  symId     String      @unique
  link      Link?       @relation(fields: [linkId], references: [id])
  linkId    String?     @unique
  meta      Json        @default("{}")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  states    CardState[]
  emojis    CardEmoji[]
  // boards    Board[]
  // ticks     Tick[]
  discusses Discuss[]
}

model CardEmoji {
  id        String          @id @default(cuid())
  card      Card            @relation(fields: [cardId], references: [id])
  cardId    String
  code      EmojiCode
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  count     CardEmojiCount?
  likes     CardEmojiLike[]

  @@unique([cardId, code])
}

model CardEmojiCount {
  id          Int       @id @default(autoincrement())
  cardEmoji   CardEmoji @relation(fields: [cardEmojiId], references: [id])
  cardEmojiId String    @unique
  nViews      Int       @default(0)
  nUps        Int       @default(0)
  nDowns      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CardEmojiLike {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  cardEmoji   CardEmoji  @relation(fields: [cardEmojiId], references: [id])
  cardEmojiId String
  choice      LikeChoice
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, cardEmojiId])
}

model CardState {
  id        String     @id @default(cuid())
  card      Card       @relation(fields: [cardId], references: [id])
  cardId    String
  commit    Commit     @relation(fields: [commitId], references: [id])
  commitId  String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  body      Json
  prev      CardState? @relation("CardStateHistory", fields: [prevId], references: [id])
  prevId    String?    @unique
  next      CardState? @relation("CardStateHistory")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bullets   Bullet[]
}

model Commit {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cardStates CardState[]
}

model Discuss {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  status    DiscussStatus  @default(ACTIVE)
  meta      Json           @default("{}")
  title     String
  content   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  count     DiscussCount? // 1-to-1
  emojis    DiscussEmoji[]
  posts     DiscussPost[]
  cards     Card[]
}

model DiscussCount {
  id        Int      @id @default(autoincrement())
  discuss   Discuss  @relation(fields: [discussId], references: [id])
  discussId String   @unique
  nPosts    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscussEmoji {
  id        Int                @id @default(autoincrement())
  discuss   Discuss            @relation(fields: [discussId], references: [id])
  discussId String
  code      EmojiCode
  nLikes    Int                @default(0) // record number of likes
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  count     DiscussEmojiCount? // 1-to-1
  likes     DiscussEmojiLike[]

  @@unique([discussId, code])
}

model DiscussEmojiCount {
  id             Int          @id @default(autoincrement())
  discussEmoji   DiscussEmoji @relation(fields: [discussEmojiId], references: [id])
  discussEmojiId Int          @unique
  nUps           Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model DiscussEmojiLike {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  discussEmoji   DiscussEmoji @relation(fields: [discussEmojiId], references: [id])
  discussEmojiId Int          @unique
  liked          Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, discussEmojiId])
}

model DiscussPost {
  id        Int                @id @default(autoincrement())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  discuss   Discuss            @relation(fields: [discussId], references: [id])
  discussId String
  status    DiscussPostStatus  @default(ACTIVE)
  content   String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  emojis    DiscussPostEmoji[]
}

model DiscussPostEmoji {
  id            Int                    @id @default(autoincrement())
  discussPost   DiscussPost            @relation(fields: [discussPostId], references: [id])
  discussPostId Int
  code          EmojiCode
  nLikes        Int                    @default(0) // record number of likes
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  count         DiscussPostEmojiCount? // 1-to-1
  likes         DiscussPostEmojiLike[]

  @@unique([discussPostId, code])
}

model DiscussPostEmojiCount {
  id                 Int              @id @default(autoincrement())
  discussPostEmoji   DiscussPostEmoji @relation(fields: [discussPostEmojiId], references: [id])
  discussPostEmojiId Int              @unique
  nUps               Int              @default(0)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model DiscussPostEmojiLike {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [userId], references: [id])
  userId             String
  discussPostEmoji   DiscussPostEmoji @relation(fields: [discussPostEmojiId], references: [id])
  discussPostEmojiId Int              @unique
  liked              Boolean
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique([userId, discussPostEmojiId])
}

model Link {
  id       String  @id @default(cuid())
  url      String  @unique // final url
  domain   String
  scraped  Json    @default("{}") // any scraped data
  author   Author? @relation(fields: [authorId], references: [id])
  authorId String?
  card     Card? // 1-to-1
  rates    Rate[] // Rates form this link(source)
}

// Poll建立後不能修改？或者允許user修改？目前不行
model Poll {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  type      PollType   @default(FIXED)
  status    PollStatus @default(OPEN)
  meta      Json       @default("{}")
  choices   String[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  count     PollCount? // 1-to-1
  // board     Board?
  votes     Vote[]
}

model PollCount {
  id         Int      @id @default(autoincrement())
  poll       Poll     @relation(fields: [pollId], references: [id])
  pollId     String   @unique
  nVotes     Int[]
  nJudgments Int[]
  // judgeStartedAt DateTime?
  // judgeEndedAt   DateTime?
  // verdictValid   Boolean?
  // verdictChoice  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Rate {
  id        String     @id @default(cuid())
  link      Link?      @relation(fields: [linkId], references: [id]) // as source
  linkId    String?
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  author    Author?    @relation(fields: [authorId], references: [id])
  authorId  String?
  sym       Sym        @relation(fields: [symId], references: [id]) // as target
  symId     String
  choice    RateChoice
  body      Json       @default("{}")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Sym {
  id        String   @id @default(cuid())
  type      SymType
  symbol    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card? // 1-to-1
  rates     Rate[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  choiceIdx Int
  // reward    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // comment    Comment? // 1-to-1
  // @@unique([userId, pollId])
}

model User {
  id                   String                 @id
  email                String                 @unique
  // profile      Profile
  // dailyProfile DailyProfile
  bulletEmojiLikes     BulletEmojiLike[]
  cardEmojiLikes       CardEmojiLike[]
  cardStates           CardState[]
  commits              Commit[]
  votes                Vote[]
  polls                Poll[]
  rates                Rate[]
  // bulletEmojis     BulletEmoji[]
  // boards       Board[]
  // boardLikes   BoardLike[]
  // bulletLikes BulletLike[]
  // comments     Comment[]
  // commentLikes CommentLike[]
  // cardBodies CardBody[]
  Discuss              Discuss[]
  DiscussEmojiLike     DiscussEmojiLike[]
  DiscussPost          DiscussPost[]
  DiscussPostEmojiLike DiscussPostEmojiLike[]
}

enum DiscussStatus {
  ACTIVE
  LOCK
  DELETE
  ARCHIVE
  REPORTED
}

enum DiscussPostStatus {
  ACTIVE
  LOCK
  DELETE
  ARCHIVE
  REPORTED
}

enum EmojiCode {
  UP
  DOWN
  PIN
  REPORT
}

enum LikeChoice {
  UP
  // DOWN
  NEUTRAL
}

enum PollFailReason {
  // 沒達到最低票數要求
  MIN_VOTES
  MIN_JUDGMENTS
  // 沒有一個多數同意的共識
  MAJOR_VERDICT
  // 結果判定為無效
  VERDICT_AS_FAIL
  // 其他問題
  OTHER
}

enum PollStatus {
  OPEN
  JUDGE
  CLOSE_SUCCESS
  CLOSE_FAIL
}

enum PollType {
  FIXED // 固定的選項
  ADD // 可以簡易新增選項
  ADD_BY_POST // 需要reply才能新增選項
}

enum RateChoice {
  LONG
  SHORT
  HOLD
}

enum SymType {
  TICKER
  TOPIC
  URL
}

// enum CardStatus {
//   ACTIVE
//   ARCHIVE
//   REDIRECT
//   REPORTED
//   DUPLICATED
// }

// enum HashtagStatus {
//   ACTIVE
//   LOCK
//   DELETE
//   ARCHIVE
//   REPORTED
// }

// enum NoticeCat {
//   POLL_REVOTE
//   POLL_START_JUDGE
//   POLL_INVITE_JUDGE
//   POLL_VERDICT
//   SIGNAL
// }

// enum NoticeStatus {
//   OPEN
//   READ
// }

// enum CommitStatus {
//   REVIEW
//   PASS
//   REJECT
// }

// enum CommitAction {
//   CREATE
//   UPDATE
//   DELETE
//   MERGE
// }

// 用於通知post、poll狀態更新
// model Notice {
//   id        Int          @id @default(autoincrement())
//   cat       NoticeCat
//   status    NoticeStatus @default(OPEN)
//   user      User         @relation(fields: [userId], references: [id])
//   userId    String
//   post      Post         @relation(fields: [postId], references: [id])
//   postId    Int
//   text      String?
//   nPops     Int          @default(0)
//   expiredAt DateTime
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
// }

// model Follow {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   symbol    Symbol   @relation(fields: [symbolId], references: [id])
//   symbolId  Int
//   followed  Boolean
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   OpenUser   OpenUser? @relation(fields: [openUserId], references: [id])
//   openUserId String?
//   @@unique([userId, symbolId])
// }

// model Profile {
//   id               Int    @id @default(autoincrement())
//   user             User   @relation(fields: [userId], references: [id])
//   userId           String
//   lv               Int    @default(0)
//   exp              Int    @default(0)
//   nGotLikes        Int    @default(0)
//   nCommits         Int    @default(0)
//   nFollowedEvents  Int    @default(0)
//   nFollowedTickers Int    @default(0)
// }

// model DailyProfile {
//   id             Int      @id @default(autoincrement())
//   user           User     @relation(fields: [userId], references: [id])
//   userId         String
//   nLikes         Int      @default(0)
//   nFeeds         Int      @default(0)
//   nEventFollows  Int      @default(0)
//   nTickerFollows Int      @default(0)
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
// }

// model Selfcard {
//   id         Int          @id @default(autoincrement())
//   template   CardTemplate
//   meta       Json?
//   user       User         @relation(fields: [userId], references: [id])
//   userId     String
//   symbol     Symbol       @relation(fields: [symbolName], references: [name])
//   symbolName String
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
//   bodyId     Int
//   body       CardBody     @relation(fields: [bodyId], references: [id])
//   @@unique([userId, symbolName])
// }

// model Tick {
//   id            Int      @id @default(autoincrement())
//   // symbol        Symbol   @relation(fields: [symbolId], references: [id])
//   // symbolId      Int
//   card          Card     @relation(fields: [cardId], references: [id])
//   cardId        String
//   open          Float
//   close         Float
//   high          Float
//   low           Float
//   volume        Int
//   change        Float
//   changePercent Float
//   at            DateTime
// }
