datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Author {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  links     Link[]
  shots     Shot[]
}

model Bullet {
  id        String   @id @default(cuid())
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // likes     BulletLike[]
  // count     BulletCount? // 1-to-1
  // boards    Board[]
  emojis    Emoji[]
}

model Card {
  id        String     @id @default(cuid())
  symbol    String     @unique
  link      Link?      @relation(fields: [linkId], references: [id])
  linkId    String?    @unique
  type      CardType
  meta      Json       @default("{}")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bullets   Bullet[]
  bodies    CardBody[]
  // boards    Board[]
  // ticks     Tick[]
  // hashtags  Hashtag[]
  shots     Shot[]
}

model CardBody {
  id        Int       @id @default(autoincrement())
  card      Card      @relation(fields: [cardId], references: [id])
  cardId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  content   Json
  timestamp Int
  prev      CardBody? @relation("CardBodyHistory", fields: [prevId], references: [id])
  prevId    Int?      @unique
  next      CardBody? @relation("CardBodyHistory")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([cardId, timestamp])
}

model Emoji {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  bullet    Bullet      @relation(fields: [bulletId], references: [id])
  bulletId  String
  text      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  count     EmojiCount?
  likes     EmojiLike[]

  @@unique([bulletId, text])
}

model EmojiCount {
  id        Int      @id @default(autoincrement())
  emoji     Emoji    @relation(fields: [emojiId], references: [id])
  emojiId   String   @unique
  nViews    Int      @default(0)
  nUps      Int      @default(0)
  nDowns    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmojiLike {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  emoji     Emoji      @relation(fields: [emojiId], references: [id])
  emojiId   String
  choice    LikeChoice
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, emojiId])
}

model Link {
  id         String  @id @default(cuid())
  url        String  @unique // final url
  domain     String
  scrapeData Json? // scrape 的任意資訊
  author     Author? @relation(fields: [authorId], references: [id])
  authorId   String?
  card       Card? // 1-to-1
  shots      Shot[] // Shots form this link(source)
}

// Poll建立後不能修改？或者允許user修改？目前不行
model Poll {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  type      PollType   @default(FIXED)
  status    PollStatus @default(OPEN)
  meta      Json       @default("{}")
  choices   String[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  count     PollCount? // 1-to-1
  // board     Board?
  votes     Vote[]
}

model PollCount {
  id         Int      @id @default(autoincrement())
  poll       Poll     @relation(fields: [pollId], references: [id])
  pollId     String   @unique
  nVotes     Int[]
  nJudgments Int[]
  // judgeStartedAt DateTime?
  // judgeEndedAt   DateTime?
  // verdictValid   Boolean?
  // verdictChoice  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Shot {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  author    Author?    @relation(fields: [authorId], references: [id])
  authorId  String?
  link      Link?      @relation(fields: [linkId], references: [id]) // as source
  linkId    String?
  target    Card       @relation(fields: [targetId], references: [id])
  targetId  String
  choice    ShotChoice
  content   Json       @default("{}")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  choiceIdx Int
  // reward    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // comment    Comment? // 1-to-1
  // @@unique([userId, pollId])
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  // profile      Profile
  // dailyProfile DailyProfile
  votes      Vote[]
  // boards       Board[]
  // boardLikes   BoardLike[]
  // bulletLikes BulletLike[]
  polls      Poll[]
  // comments     Comment[]
  // commentLikes CommentLike[]
  cardBodies CardBody[]
  emojis     Emoji[]
  emojiLikes EmojiLike[]
  Shot       Shot[]
}

// model Profile {
//   id               Int    @id @default(autoincrement())
//   user             User   @relation(fields: [userId], references: [id])
//   userId           String
//   lv               Int    @default(0)
//   exp              Int    @default(0)
//   nGotLikes        Int    @default(0)
//   nCommits         Int    @default(0)
//   nFollowedEvents  Int    @default(0)
//   nFollowedTickers Int    @default(0)
// }

// model DailyProfile {
//   id             Int      @id @default(autoincrement())
//   user           User     @relation(fields: [userId], references: [id])
//   userId         String
//   nLikes         Int      @default(0)
//   nFeeds         Int      @default(0)
//   nEventFollows  Int      @default(0)
//   nTickerFollows Int      @default(0)
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
// }

// model BulletLike {
//   id        Int        @id @default(autoincrement())
//   user      User       @relation(fields: [userId], references: [id])
//   userId    String
//   bullet    Bullet     @relation(fields: [bulletId], references: [id])
//   bulletId  String
//   choice    LikeChoice
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   @@unique([userId, bulletId])
// }

// model BulletCount {
//   id        Int      @id @default(autoincrement())
//   bullet    Bullet   @relation(fields: [bulletId], references: [id])
//   bulletId  String   @unique
//   nUps      Int      @default(0)
//   nDowns    Int      @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model CommentLike {
//   id        Int        @id @default(autoincrement())
//   user      User       @relation(fields: [userId], references: [id])
//   userId    String
//   comment   Comment    @relation(fields: [commentId], references: [id])
//   commentId Int
//   choice    LikeChoice
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   @@unique([userId, commentId])
// }

// model CommentCount {
//   id        Int      @id @default(autoincrement())
//   comment   Comment  @relation(fields: [commentId], references: [id])
//   commentId Int      @unique
//   nViews    Int      @default(0)
//   nUps      Int      @default(0)
//   nDowns    Int      @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Comment {
//   id         Int           @id @default(autoincrement())
//   user       User          @relation(fields: [userId], references: [id])
//   userId     String
//   author     Author?       @relation(fields: [authorName], references: [name])
//   authorName String?
//   board      Board         @relation(fields: [boardId], references: [id])
//   boardId    Int
//   vote       Vote?         @relation(fields: [voteId], references: [id])
//   voteId     Int?          @unique
//   status     CommentStatus @default(ACTIVE)
//   createdAt  DateTime      @default(now())
//   updatedAt  DateTime      @updatedAt
//   content    String
//   count      CommentCount?
//   likes      CommentLike[]
// }

// model BoardLike {
//   id        Int        @id @default(autoincrement())
//   user      User       @relation(fields: [userId], references: [id])
//   userId    String
//   board     Board      @relation(fields: [boardId], references: [id])
//   boardId   Int
//   choice    LikeChoice
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   @@unique([userId, boardId])
// }

// model BoardCount {
//   id        Int      @id @default(autoincrement())
//   board     Board    @relation(fields: [boardId], references: [id])
//   boardId   Int      @unique
//   nViews    Int      @default(0)
//   nUps      Int      @default(0)
//   nDowns    Int      @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Board {
//   id        Int         @id @default(autoincrement())
//   user      User        @relation(fields: [userId], references: [id])
//   userId    String
//   bullet    Bullet      @relation(fields: [bulletId], references: [id])
//   bulletId  String
//   card      Card        @relation(fields: [cardId], references: [id])
//   cardId    String
//   status    BoardStatus @default(ACTIVE)
//   hashtag   String // 用hashtag作為bullet與board的連結
//   meta      String
//   content   String
//   comments  Comment[]
//   pollId    Int?
//   poll      Poll?       @relation(fields: [pollId], references: [id]) // 1-to-1
//   likes     BoardLike[]
//   count     BoardCount? // 1-to-1
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @updatedAt
//   @@unique([cardId, bulletId, hashtag])
// }

// model Selfcard {
//   id         Int          @id @default(autoincrement())
//   template   CardTemplate
//   meta       Json?
//   user       User         @relation(fields: [userId], references: [id])
//   userId     String
//   symbol     Symbol       @relation(fields: [symbolName], references: [name])
//   symbolName String
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
//   bodyId     Int
//   body       CardBody     @relation(fields: [bodyId], references: [id])
//   @@unique([userId, symbolName])
// }

// model Tick {
//   id            Int      @id @default(autoincrement())
//   // symbol        Symbol   @relation(fields: [symbolId], references: [id])
//   // symbolId      Int
//   card          Card     @relation(fields: [cardId], references: [id])
//   cardId        String
//   open          Float
//   close         Float
//   high          Float
//   low           Float
//   volume        Int
//   change        Float
//   changePercent Float
//   at            DateTime
// }

enum CardType {
  TICKER
  TOPIC
  WEBPAGE
}

enum LikeChoice {
  UP
  DOWN
  NEUTRAL
}

enum PollFailReason {
  // 沒達到最低票數要求
  MIN_VOTES
  MIN_JUDGMENTS
  // 沒有一個多數同意的共識
  MAJOR_VERDICT
  // 結果判定為無效
  VERDICT_AS_FAIL
  // 其他問題
  OTHER
}

enum PollStatus {
  OPEN
  JUDGE
  CLOSE_SUCCESS
  CLOSE_FAIL
}

enum PollType {
  FIXED // 固定的選項
  ADD // 可以簡易新增選項
  ADD_BY_POST // 需要reply才能新增選項
}

enum ShotChoice {
  LONG
  SHORT
  HOLD
}

// enum CardStatus {
//   ACTIVE
//   ARCHIVE
//   REDIRECT
//   REPORTED
//   DUPLICATED
// }

// enum BoardStatus {
//   ACTIVE
//   LOCK
//   DELETE
//   ARCHIVE
//   REPORTED
// }

// enum CommentStatus {
//   ACTIVE
//   LOCK
//   DELETE
//   ARCHIVE
//   REPORTED
// }

// enum HashtagStatus {
//   ACTIVE
//   LOCK
//   DELETE
//   ARCHIVE
//   REPORTED
// }

// enum NoticeCat {
//   POLL_REVOTE
//   POLL_START_JUDGE
//   POLL_INVITE_JUDGE
//   POLL_VERDICT
//   SIGNAL
// }

// enum NoticeStatus {
//   OPEN
//   READ
// }

// enum CommitStatus {
//   REVIEW
//   PASS
//   REJECT
// }

// enum CommitAction {
//   CREATE
//   UPDATE
//   DELETE
//   MERGE
// }

// entity? dummy? external user? usersymbol?
// open-user-predictates: get-votes -> polls/posts
// model OpenUser {
//   id          String       @id @default(cuid())
//   // 自動建立open-user對應的dummy-user
//   user        User         @relation(fields: [userId], references: [id])
//   userId      String
//   links       Link[]
//   follows     Follow[]
//   voteCommits VoteCommit[]
// }

// 等同想法： 1.有自��的predicates 2.二擇一：���應poll或來自link(user為autolink)
// 1個link只能有1個thought?
// 要查open-credit時：open-user -> get-open-user（即便一個link有複數個open-users，仍然為這個
// 1. 擂台：latest-polls: poll{comments} & replies(posts){reply指向一個poll}
//    1. reply-to-poll 2. reply-to-post �����立的情況：優點：好找polls、邏輯較為清處；缺點：notice會較為複雜？
// 2. 情報流：latest-posts-by-feeder
// link要獨立嗎？ vs post就存粹作為reply？idea？->
//    1. 在查詢credit時get-thoughts（透過openUser） vs get-links（透過mentionedOpenUsers）
//    2. poll在看thoughts時，get-thoughts（取得全部相關的) vs get-replies + get-links
// 若是link的情況，user要是誰？ open-user?
// model Post {
//   id          Int          @id @default(autoincrement())
//   cat         PostCat      @default(REPLY)
//   status      PostStatus   @default(ACTIVE)
//   user        User         @relation(fields: [userId], references: [id])
//   userId      String
//   // reply-poll-post
//   poll        Poll?        @relation(fields: [pollId], references: [id])
//   pollId      Int?
//   // link-post
//   link        Link?        @relation(fields: [linkId], references: [id])
//   linkId      Int?
//   // title     String?
//   text        String
//   count       PostCount
//   commments   Comment[]
//   likes       PostLike[]
//   symbols     Symbol[]     @relation(references: [id])
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
//   notices     Notice[]
//   // Commit      Commit[]
//   votes       Vote[]
//   voteCommits VoteCommit[]
// }

// model Choice {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   poll      Poll     @relation(fields: [pollId], references: [id])
//   pollId    Int
//   text      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   votes     Vote[]
// }

// 讓user幫open-user產生predicates
// 先不考慮幫reply產生predicates
// model VoteCommit {
//   id         Int      @id @default(autoincrement())
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String
//   post       Post     @relation(fields: [postId], references: [id])
//   postId     Int
//   openUser   OpenUser @relation(fields: [openUserId], references: [id])
//   openUserId String
//   vote       Vote     @relation(fields: [voteId], references: [id])
//   voteId     Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// 用於通知post、poll狀態更新
// model Notice {
//   id        Int          @id @default(autoincrement())
//   cat       NoticeCat
//   status    NoticeStatus @default(OPEN)
//   user      User         @relation(fields: [userId], references: [id])
//   userId    String
//   post      Post         @relation(fields: [postId], references: [id])
//   postId    Int
//   text      String?
//   nPops     Int          @default(0)
//   expiredAt DateTime
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
// }

// model Follow {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   symbol    Symbol   @relation(fields: [symbolId], references: [id])
//   symbolId  Int
//   followed  Boolean
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   OpenUser   OpenUser? @relation(fields: [openUserId], references: [id])
//   openUserId String?
//   @@unique([userId, symbolId])
// }

// model Commit {
//   id        Int            @default(autoincrement()) @id
//   user      User           @relation(fields: [userId], references: [id])
//   userId    String
//   symbol    Symbol         @relation(fields: [symbolId], references: [id])
//   symbolId  Int
//   post      Post           @relation(fields: [postId], references: [id])
//   postId    Int
//   status    CommitStatus   @default(REVIEW)
//   action    CommitAction
//   body      String
//   // count     CommitCount
//   reviews   CommitReview[]
//   createdAt DateTime       @default(now())
//   updatedAt DateTime       @updatedAt
// }

// model CommitCount {
// id         Int      @default(autoincrement()) @id
// commit     Commit   @relation(fields: [commitId], references: [id])
// commitId   Int      @unique
// nAgrees    Int      @default(0)
// nDisagrees Int      @default(0)
// nHolds     Int      @default(0)
// createdAt  DateTime @default(now())
// updatedAt  DateTime @updatedAt
// }

// model CommitReview {
//   id        Int      @default(autoincrement()) @id
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   commit    Commit   @relation(fields: [commitId], references: [id])
//   commitId  Int
//   choice    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([userId, commitId])
// }

// model Bet {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String
//   symbol    Symbol   @relation(fields: [symbolId], references: [id])
//   symbolId  Int
//   body      String
//   result    String?
//   expiredAt DateTime
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
