# Custom scalar，需要同步修改./apollo/schema.ts @see https://www.graphql-scalars.dev/docs/quick-start
scalar DateTime
scalar JSON

type Query {
  # 搜尋ticker, topics，近似字搜尋（ElasticSearch？）
  searchAll(term: String!): [String!]!
  searchTicker(term: String!): [String!]!
  searchTopic(term: String!): [String!]!

  latestCardEntries(afterId: String): [CardEntry!]!

  link(url: String!): Link

  # 以 symbol 查找，若無返回 null
  # @cardBodyId 若給予，返回該card及指定的body，否則返回 latest body
  card(symbol: String!, cardBodyId: String): Card

  # 以 url 查找，若無會 fetch, resolve url 並創新 card
  webpageCard(url: String!): Card!

  # 以 card symbol 找該 card 所有的 active hashtags
  hashtags(symbol: String): [Hashtag!]

  # @throw 若找不到，丟error
  bullet(id: ID!): Bullet!

  board(id: ID!): Board!

  comments(boardId: ID!, afterId: ID): [Comment!]!

  me: User!

  myVotes(after: String): [Vote!]!
  myCommentLikes(after: String): [CommentLike!]!
  myBoardLikes(after: String): [BoardLike!]!
  myBulletLikes(after: String): [BulletLike!]!

  # --- NEXT ---

  # 以下card目前暫不考慮
  # selfcard(id: ID!): Selfcard
  # mycard(symbolName: String!): Selfcard

  # 專用於顯示
  # topComments(blockId: ID!, afterId: ID): [CommentWithReplies!]!

  # 所有的comments（含spot），幫助cache，僅含spotReplies
  # comments(cardId: ID!, afterId: ID): [Comment!]!

  # 用於filter comments的情形（例如：/q, /stage, ...)
  # commentsBySymbol(pageTitle: String!, symbol: String!, afterId: ID): [Comment!]!

  # 自動標註可能的topic, tickers
  # automark(text: String!): String!

  # ticks(symbolId: ID!, after: String): [Tick!]!

  # trendTopics: [String!]!
  # newTopics: [String!]!
  # newTickers: [String!]!

  # botPolls(symbolName: String): [Poll!]!
  # latestPolls(symbolId: ID, afterId: String): [Poll!]!
  # pollHints(symbols: [String], title: String): [Poll!]!
  # poll(id: ID!): Poll!

  # myPollLikes(afterId: ID): [PollLike!]!

  # latestPosts(symbolId: ID, afterId: String): [Post!]!
  # repliedPosts(parentId: ID!, afterId: String): [Post!]!
  # risingPosts(afterId: String): [Post!]!
  # trendPosts(afterId: String): [Post!]!

  # symbol(name: String!): Symbol!

  # post(id: ID!): Post!
  # event(id: ID!): Event!
  # ticker(id: ID, name: String): Ticker!
  # commit(id: ID!): Commit!
  # commits(symbolId: ID!, after: String): [Commit!]!

  # myPostLikes(after: String): [PostLike!]!
  # myCommentLikes(after: String): [CommentLike!]!

  # myComments(after: String): [ID!]!
  # myPosts(afterId: String): [Post!]!
  # myFollows: [Follow!]!
  # myCommits(after: String): [ID!]!
  # myCommitReviews(after: String): [CommitReview!]!
  # myWaitedCommitReviews: [CommitReview!]!

  # tagHints(term: String): [String!]!
  # tickerHints(term: String): [String!]!
  # eventHints(term: String): [String!]!

  # fetchPage(url: String!): Page!

  # myBets: [Bet!]!
  # myNotices: [Notice!]!
  # mySignals: [Signal]
  # groups: [Group]
  # myGroups: [Group]
  # groupPosts(groupId: ID): [Post]
}

type Mutation {
  # 若 symbol 已存在會直接返回現有的 card，不另外創新
  createSymbolCard(data: CardInput!): Card!
  # createCardHead(cardId: ID!, data: CardBulletRootInput!): CardHead!

  # 若該 symbol 尚未有 card 時，需要給 template，會同步創 card, body
  createCardBody(cardId: ID!, data: CardBodyInput!): CardBody!

  # 等價於create hashtag，會同步update card body hashtag
  # createBoard(cardId: ID!, bulletId: ID!, data: BoardInput!): CreateBoardResponse!

  # （尚未開放）一般的 hashtag 需透過 editor 編輯來創造，但對於內建、常用的 hashtag 可直接創造
  # createQuickHashtag(cardId: ID!, bulletId: Int!, data: BoardInput!): CreateHashtagResponse!

  createHashtagLike(bulletId: ID!, data: LikeInput!): HashtagLikeResponse!
  updateHashtagLike(id: ID!, data: LikeInput!): HashtagLikeResponse!

  createVote(pollId: ID!, data: VoteInput!): Vote!

  createComment(boardId: ID!, pollId: ID, data: CommentInput!): Comment!

  createOauthorVote(pollId: ID!, oauthorName: String!, data: VoteInput!): Vote!
  createOauthorComment(boardId: ID!, pollId: ID, oauthorName: String!, data: CommentInput!): Comment!

  # createOauthorComment(boardId: ID!, data: CommentInput!)
  # updateComment(id: ID!, data: CommentInput!): Comment!

  # createBulletLike(bulletId: ID!, data: LikeInput!): BulletLikeResponse!
  # updateBulletLike(id: ID!, data: LikeInput!): BulletLikeResponse!

  createCommentLike(commentId: ID!, data: LikeInput!): CommentLikeResponse!
  updateCommentLike(id: ID!, data: LikeInput!): CommentLikeResponse!

  createBoardLike(boardId: ID!, data: LikeInput!): BoardLikeResponse!
  updateBoardLike(id: ID!, data: LikeInput!): BoardLikeResponse!

  # signIn(email: String!, password: String!): AuthPayload!
  # signUp(email: String!, password: String!): User!
  # signOut: Boolean!

  # --- NEXT ---

  # createPoll(data: PollInput!): Poll!
  # createPollLike(pollId: ID!, data: LikeInput!): PollLikeResonse!
  # updatePollLike(id: ID!, data: LikeInput!): PollLikeResonse!

  # createVotePost(pollId: ID!, choiceId: ID!, data: PostInput!): Post!
  # createPost(data: PostInput!, pollId: ID): Post!
  # updatePost(id: ID!, data: PostInput!): Post!
  # createPostLike(postId: ID!, data: LikeInput!): PostLikeResonse!
  # updatePostLike(id: ID!, data: LikeInput!): PostLikeResonse!

  # 允許更新postVote？
  # updatePollVote(pollId: ID!, data: VoteInput!): PollVote!

  # createCommit(data: CommitInput!): Commit!
  # updateCommit(id: ID!, data: CommitInput!): Commit!
  # applyCommitReview(commitId: ID!): ApplyCommitReviewResult!
  # applyCommitReview(commitId: ID!): CommitReview!
  # updateCommitReview(id: ID!, data: CommitReviewInput!): CommitReview!

  # createFollow(symbolId: ID!, data: FollowInput!): Follow!
  # updateFollow(symbolId: ID!, data: FollowInput!): Follow!

  ### upcoming ###

  # uploadImg(): Img
  # createBet(): Bet
  # upsertBet(data: BetInput): Bet
  # createGroup(data: GroupInput): Group
  # updateGroup(data: GroupInput): Group
  # joinGroup(id: ID): Boolean
  # leaveGroup(id: ID): Boolean
  # inviteJoin(groupId: ID, criteria: String): Boolean
}

# type AuthPayload {
#   token: String!
#   user: User!
# }

type User {
  id: ID!
  email: String!
  # profileImage: String
  # trips: [Launch]!
}

type Link {
  id: ID!
  url: String!
  domain: String!
  sourceType: String!
  sourceId: String
  oauthorName: String
}

# type Choice {
#   id: ID!
#   userId: ID!
#   text: String!
# }

type Vote {
  id: ID!
  pollId: Int!
  choiceIdx: Int!
  # reward: Float
  # createdAt: DateTime!
  # updatedAt: DateTime!
}

type PollCount {
  id: ID!
  nVotes: [Int!]!
  # nJudgements: [Int]
  # judgeStartedAt: DateTime
  # judgeEndedAt: DateTime
  # verdictValid: Boolean
  # verdictChoice: Int
  # updatedAt: DateTime!
  # failedMsg: String
}

type Poll {
  id: ID!
  userId: ID!
  boardId: Int!
  # type: PollType!
  # status: PollStatus!
  choices: [String!]!
  # nVotes: [Int!]!
  count: PollCount!
  # title: String!
  # text: String
  # start: DateTime!
  # end: DateTime!
  # nDays: Int!
  # minVotes: Int!
  # nDaysJudge: Int!
  # minJudgments: Int!
  # count: PollCount!
  # posts: [Post!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Hashtag {
  userId: String!
  boardId: Int!
  boardStatus: BoardStatus!
  text: String!
  linkBullet: Boolean
}

type HashtagLike {
  id: ID!
  hashtagId: Int!
  choice: LikeChoice!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BulletCount {
  id: ID!
  nUps: Int!
  nDowns: Int!
}

type BulletLikeResponse {
  like: BulletLike!
  count: BulletCount!
}

type CreateHashtagResponse {
  board: Board!
  # hashtag: Hashtag!
  cardBody: CardBody!
}

type BulletLike {
  id: ID!
  bulletId: Int!
  choice: LikeChoice!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BulletCount {
  id: ID!
  nUps: Int!
  nDowns: Int!
}

type BulletLikeResponse {
  like: BulletLike!
  count: BulletCount!
}

type Bullet {
  id: ID!
  cardId: Int!
  count: BulletCount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CardHead {
  id: ID!
  userId: String!
  # content: JSONObject!
  content: String! # json
  timestamp: Int!
  prevId: Int
}

type CardBody {
  id: ID!
  userId: String!
  # content: JSONObject!
  content: String! # json
  timestamp: Int!
  prevId: Int
}

type Card {
  id: ID!
  type: CardType!
  symbol: String!
  link: Link
  head: CardHead!
  body: CardBody!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CardEntry {
  id: ID!
  type: CardType!
  symbol: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Consider to remove

type CommentLike {
  id: ID!
  commentId: Int!
  choice: LikeChoice!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentCount {
  id: ID!
  nViews: Int!
  nUps: Int!
  nDowns: Int!
}

type CommentLikeResponse {
  like: CommentLike!
  count: CommentCount!
}

type Comment {
  id: ID!
  userId: String!
  oauthorName: String
  status: CommentStatus!
  content: String!

  # 若是投票的會一起記錄
  vote: Vote

  count: CommentCount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BoardLike {
  id: ID!
  boardId: Int!
  choice: LikeChoice!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BoardCount {
  id: ID!
  nViews: Int!
  nUps: Int!
  nDowns: Int!
  # nComments: Int!
}

type BoardLikeResponse {
  like: BoardLike!
  count: BoardCount!
}

type Board {
  id: ID!
  userId: String!
  bulletId: Int
  cardId: Int
  status: BoardStatus!
  hashtag: String!
  # meta: JSONObject!
  # content: JSONObject!
  meta: String! # json
  content: String! # json
  poll: Poll
  count: BoardCount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# ------ Inputs ------

input LikeInput {
  choice: LikeChoice!
}

input VoteInput {
  choiceIdx: Int!
}

input PollInput {
  # cat: PollCat!
  choices: [String!]!
}

input CommentInput {
  content: String!
  vote: VoteInput
}

input BoardInput {
  hashtag: String!
  meta: String!
  content: String!
}

# input BulletInput {
#   id: Int
#   timestamp: Int
#   userIds: [String!]
#   head: String!
#   body: String
#   # hashtags: Hashtag[]
#   placeholder: String
#   children: [BulletInput!]
#   prevHead: String
#   prevBody: String
#   op: BulletOperation

#   sourceUrl: String
#   oauthorName: String
#   boardId: Int
#   pollId: Int

#   # 這些需要bot權限，一般user無法操作
#   # freeze: Boolean
#   # freezeChildren: Boolean
#   # keyvalue: Boolean
#   # valueBoolean: Boolean
#   # valueArray: Boolean
#   # pin: Boolean
#   # pinCode: PinCode
#   # childTemplate: BulletInput

#   headValidator: String
#   bodyValidator: String
# }

# input CardBulletRootInput {
#   symbol: String!
#   root: BulletInput!
# }

input CardBodyInput {
  self: JSON
  mirrors: [JSON!]
}

input CardTemplatePropsInput {
  template: String!
  title: String!
  ticker: String
}

input CardInput {
  symbol: String!
  templateProps: CardTemplatePropsInput
}

# ------ NEXT ------

type Tick {
  id: ID!
  symbolId: Int!
  value: Float!
  at: DateTime!
}

# type PollJudgment {
#   id: ID!
#   pollId: Int!
#   choice: Int!
#   comment: Comment!
#   createdAt: DateTime!
#   updatedAt: DateTime!
# }

input PollJudgmentInput {
  choice: Int!
}

# type Page {
#   id: ID!
#   # null if not existed
#   createdPostId: ID
#   # symbols: [String!]
#   suggestTitle: String
#   suggestTags: [String!]!
#   suggestEvents: [String!]!
#   suggestTickers: [String!]!
#   # null if not created
#   createdEvent: Symbol
# }

# type EventContent {
#   tags: [String!]!
#   tickers: [String!]!
#   events: [String!]!
#   equalEvents: [String!]!
# }

# type PostLink {
#   url: String!
# }

# type Follow {
#   id: ID!
#   # symbol: Symbol!
#   symbolId: Int!
#   followed: Boolean!
#   # createdAt: DateTime!
#   updatedAt: DateTime!
# }

# input FollowInput {
#   symbolId: ID!
#   followed: Boolean!
# }

# type Commit {
#   id: ID!
#   symbolId: ID!
#   status: CommitStatus!
#   action: CommitAction!
#   content: String!
#   # post: Post!
#   # TODO:洩漏問題？
#   reviews: [CommitReview!]!
#   createdAt: DateTime
#   updatedAt: DateTime
# }

# input CommitInput {
#   symbolId: ID
#   action: CommitAction!
#   content: String!
#   # postContent: String!
#   # post: String!
# }

# type CommitReview {
#   id: ID!
#   userId: ID!
#   choice: Int!
#   createdAt: DateTime
#   updatedAt: DateTime
# }

# input CommitReviewInput {
#   # commitId: ID!
#   choice: Int!
# }

enum SourceType {
  VIDEO
  POST
  AUTHOR
  OTHER
}

enum CardType {
  TICKER
  TOPIC
  WEBPAGE
}

enum CardStatus {
  ACTIVE
  ARCHIVE
  REDIRECT
  REPORTED
  DUPLICATED
}

enum BoardStatus {
  ACTIVE
  LOCK
  DELETE
  ARCHIVE
  REPORTED
}

enum CommentStatus {
  ACTIVE
  LOCK
  DELETE
  ARCHIVE
  REPORTED
}

enum PollType {
  FIXED
  ADD
  ADD_BY_POST
}

enum PollStatus {
  OPEN
  JUDGE
  CLOSE_SUCCESS
  CLOSE_FAIL
}

enum PollFailReason {
  MIN_VOTES
  MIN_JUDGMENTS
  MAJOR_VERDICT
  VERDICT_AS_FAIL
  OTHER
}

enum LikeChoice {
  UP
  DOWN
  NEUTRAL
}

enum PinCode {
  VS
  BUYSELL
}

enum BulletOperation {
  CREATE
  MOVE
  UPDATE
  DELETE
  UPDATE_MOVE
}
