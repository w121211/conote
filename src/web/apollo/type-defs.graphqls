# Custom scalar，需要同步修改./apollo/schema.ts @see https://www.graphql-scalars.dev/docs/quick-start
scalar BigInt
scalar DateTime
scalar JSON

type Query {
  # 以 ID 或 name 查找 (若兩者皆給以 ID 查找)，若無返回 null
  author(id: ID, name: String): Author

  bullet(id: ID!): Bullet

  # all emojis of a bullet
  bulletEmojis(bulletId: ID!): [BulletEmoji!]!

  # 以 id, symbol, or url 查找，若無返回 null，以 url 查找時，若無會自動創一個 card
  card(id: ID, symbol: String, url: String): Card

  # 若查無返回 null
  # change(id: ID): Change

  # all emojis of a card
  cardEmojis(cardId: ID!): [CardEmoji!]!

  # 若查無返回 null
  # cardMeta(symbol: String!): CardMeta

  # latestCommits(afterId: String): [Commit!]!
  latestCardDigests(afterId: String): [CardDigest!]!

  # latestBullets(afterId: String): [Commit!]!

  link(id: ID, url: String): Link

  me: User!

  # 若沒有 like 過會返回 null
  myBulletEmojiLike(bulletEmojiId: ID!): BulletEmojiLike

  myCardEmojiLike(cardEmojiId: ID!): CardEmojiLike

  # 可重複 shot
  myShots(targetId: ID!): [Shot!]!

  # 因為目前可重複投票，所以同一個 poll 可能會有多個 votes
  myVotes(pollId: ID!): [Vote!]!

  poll(id: ID!): Poll

  # 搜尋 ticker, topics，近似搜尋 TODO:ElasticSearch？
  searchAll(term: String!): [String!]!

  searchTicker(term: String!): [String!]!

  searchTopic(term: String!): [String!]!

  shot(id: ID!): Shot

  shotsByAuthor(authorId: ID!, targetId: ID!): [Shot!]!

  shotsBySource(linkId: ID!): [Shot!]!

  # 以 card symbol 找該 card 所有的 active hashtags
  # hashtags(symbol: String!): [Hashtag!]

  # myVotes(after: String): [Vote!]!
  # myCommentLikes(after: String): [CommentLike!]!
  # myBoardLikes(after: String): [BoardLike!]!
  # myBulletLikes(after: String): [BulletLike!]!
  # board(id: ID!): Board!
  # comments(boardId: ID!, afterId: ID): [Comment!]!

  # 以下card目前暫不考慮
  # selfcard(id: ID!): Selfcard
  # mycard(symbolName: String!): Selfcard

  # 專用於顯示
  # topComments(blockId: ID!, afterId: ID): [CommentWithReplies!]!

  # 所有的comments（含spot），幫助cache，僅含spotReplies
  # comments(cardId: ID!, afterId: ID): [Comment!]!

  # 用於filter comments的情形（例如：/q, /stage, ...)
  # commentsBySymbol(pageTitle: String!, symbol: String!, afterId: ID): [Comment!]!

  # 自動標註可能的topic, tickers
  # automark(text: String!): String!

  # ticks(symbolId: ID!, after: String): [Tick!]!

  # trendTopics: [String!]!
  # newTopics: [String!]!
  # newTickers: [String!]!

  # botPolls(symbolName: String): [Poll!]!
  # latestPolls(symbolId: ID, afterId: String): [Poll!]!
  # pollHints(symbols: [String], title: String): [Poll!]!
  # poll(id: ID!): Poll!

  # myPollLikes(afterId: ID): [PollLike!]!

  # latestPosts(symbolId: ID, afterId: String): [Post!]!
  # repliedPosts(parentId: ID!, afterId: String): [Post!]!
  # risingPosts(afterId: String): [Post!]!
  # trendPosts(afterId: String): [Post!]!

  # symbol(name: String!): Symbol!

  # post(id: ID!): Post!
  # event(id: ID!): Event!
  # ticker(id: ID, name: String): Ticker!

  # myPostLikes(after: String): [PostLike!]!
  # myCommentLikes(after: String): [CommentLike!]!

  # myComments(after: String): [ID!]!
  # myPosts(afterId: String): [Post!]!
  # myFollows: [Follow!]!
  # myCommits(after: String): [ID!]!
  # myCommitReviews(after: String): [CommitReview!]!
  # myWaitedCommitReviews: [CommitReview!]!

  # tagHints(term: String): [String!]!
  # tickerHints(term: String): [String!]!
  # eventHints(term: String): [String!]!

  # fetchPage(url: String!): Page!

  # myBets: [Bet!]!
  # myNotices: [Notice!]!
  # mySignals: [Signal]
  # groups: [Group]
  # myGroups: [Group]
  # groupPosts(groupId: ID): [Post]
}

type Mutation {
  # 若 emoji 已經創，返回該 emoji 並 like
  createBulletEmoji(bulletId: ID!, code: EmojiCode!): CreateBulletEmojiResponse!
  upsertBulletEmojiLike(bulletEmojiId: ID!, data: LikeInput!): UpsertBulletEmojiLikeResponse!

  # createBoard(cardId: ID!, bulletId: ID!, data: BoardInput!): CreateBoardResponse!

  createCardEmoji(cardId: ID!, code: EmojiCode!): CreateCardEmojiResponse!
  upsertCardEmojiLike(cardEmojiId: ID!, data: LikeInput!): UpsertCardEmojiLikeResponse!

  updateCardMeta(symbol: String!, data: CardMetaInput!): CardMeta!

  createCommit(data: CommitInput!): Commit!

  createPoll(data: PollInput!): Poll!

  createShot(data: ShotInput!): Shot!
  updateShot(id: ID!, data: ShotInput!): Shot!

  createVote(pollId: ID!, data: VoteInput!): Vote!

  # createComment(boardId: ID!, pollId: ID, data: CommentInput!): Comment!
  # createAuthorComment(boardId: ID!, pollId: ID, oauthorName: String!, data: CommentInput!): Comment!

  # createOauthorComment(boardId: ID!, data: CommentInput!)
  # updateComment(id: ID!, data: CommentInput!): Comment!

  # createBulletLike(bulletId: ID!, data: LikeInput!): BulletLikeResponse!
  # updateBulletLike(id: ID!, data: LikeInput!): BulletLikeResponse!

  # createCommentLike(commentId: ID!, data: LikeInput!): CommentLikeResponse!
  # updateCommentLike(id: ID!, data: LikeInput!): CommentLikeResponse!

  # createBoardLike(boardId: ID!, data: LikeInput!): BoardLikeResponse!
  # updateBoardLike(id: ID!, data: LikeInput!): BoardLikeResponse!

  # signIn(email: String!, password: String!): AuthPayload!
  # signUp(email: String!, password: String!): User!
  # signOut: Boolean!

  # --- NEXT ---

  # createPoll(data: PollInput!): Poll!
  # createPollLike(pollId: ID!, data: LikeInput!): PollLikeResonse!
  # updatePollLike(id: ID!, data: LikeInput!): PollLikeResonse!

  # createVotePost(pollId: ID!, choiceId: ID!, data: PostInput!): Post!
  # createPost(data: PostInput!, pollId: ID): Post!
  # updatePost(id: ID!, data: PostInput!): Post!
  # createPostLike(postId: ID!, data: LikeInput!): PostLikeResonse!
  # updatePostLike(id: ID!, data: LikeInput!): PostLikeResonse!

  # 允許更新postVote？
  # updatePollVote(pollId: ID!, data: VoteInput!): PollVote!

  # createCommit(data: CommitInput!): Commit!
  # updateCommit(id: ID!, data: CommitInput!): Commit!
  # applyCommitReview(commitId: ID!): ApplyCommitReviewResult!
  # applyCommitReview(commitId: ID!): CommitReview!
  # updateCommitReview(id: ID!, data: CommitReviewInput!): CommitReview!

  # createFollow(symbolId: ID!, data: FollowInput!): Follow!
  # updateFollow(symbolId: ID!, data: FollowInput!): Follow!

  ### upcoming ###

  # uploadImg(): Img
  # createBet(): Bet
  # upsertBet(data: BetInput): Bet
  # createGroup(data: GroupInput): Group
  # updateGroup(data: GroupInput): Group
  # joinGroup(id: ID): Boolean
  # leaveGroup(id: ID): Boolean
  # inviteJoin(groupId: ID, criteria: String): Boolean
}

# type AuthPayload {
#   token: String!
#   user: User!
# }

type Author {
  id: ID!
  name: String!
}

type Bullet {
  id: ID!
  cardId: String!
  # createdAt: DateTime!
  # updatedAt: DateTime!
}

type BulletEmoji {
  id: ID!
  code: EmojiCode!
  count: BulletEmojiCount!
}

type BulletEmojiCount {
  id: ID!
  nUps: Int!
  nDowns: Int!
}

type BulletEmojiLike {
  id: ID!
  bulletEmojiId: String!
  choice: LikeChoice!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# type BulletNodeChange {
#   type: String!
#   cid: String!
#   toParentCid: String!
#   toIndex: Int
#   data: Bullet
# }

# type BulletTreeNode {
#   cid: String!
#   parentCid: String
#   index: Int
#   data: Bullet
#   # change?: 'move' // record change-event lively
#   children: BulletTreeNode
# }

type Card {
  id: ID!
  meta: CardMeta!
  symbol: Symbol!
  link: Link
  # headDoc: CardDoc # 可能為 null
  updatedAt: DateTime!
  state: CardState # 可能為 null
}

type CardEmoji {
  id: ID!
  code: EmojiCode!
  count: CardEmojiCount!
}

type CardEmojiCount {
  id: ID!
  nUps: Int!
  nDowns: Int!
}

type CardEmojiLike {
  id: ID!
  cardEmojiId: String!
  choice: LikeChoice!
  updatedAt: DateTime!
}

type CardDigest {
  id: ID!
  meta: CardMeta!
  symbol: Symbol!
  link: Link
  # headDoc: CardDoc # 可能為 null
  updatedAt: DateTime!
  digest: JSON!
}

type CardMeta {
  redirects: [String!]
  duplicates: [String!]
  url: String
  author: String
  date: String
  description: String
  keywords: [String!]
  title: String
}

type CardState {
  id: ID!
  cardId: String!
  userId: String!
  commitId: String!
  prevId: String!
  body: CardStateBody!
  updatedAt: DateTime!
}

type CardStateBody {
  # id: String! # 和 change id 相同
  # symbol: String!
  prevStateId: String! # prev-card-change
  subStateIds: [String!]!
  # subSymbols: [String!]! # sub-docs
  # changes: [BulletNodeChange!]!
  # value: [BulletTreeNode!]!
  changes: JSON!
  value: JSON!
}

type Commit {
  id: String!
  userId: String!
  updatedAt: DateTime!
  cardStates: [CardState!]!
}

type CreateBulletEmojiResponse {
  emoji: BulletEmoji!
  like: BulletEmojiLike! # 創 emoji 會同時創 emoji-like，表示 user 點讚此 emoji
}

type CreateCardEmojiResponse {
  emoji: CardEmoji!
  like: CardEmojiLike! # 創 emoji 會同時創 emoji-like，表示 user 點讚此 emoji
}

type Link {
  id: ID!
  url: String!
  authorId: String
  # scraped: Scraped!
}

type Scraped {
  authorName: String
  date: String
  description: String
  title: String
  keywords: [String!]
  tickers: [String!]
}

type Shot {
  id: ID!
  userId: String!
  authorId: String
  linkId: String
  targetId: String!
  choice: ShotChoice!
  body: ShotBody
}

type ShotBody {
  comment: String
  quote: String
}

type Symbol {
  id: ID!
  type: SymbolType!
  name: String!
}

type Poll {
  id: ID!
  userId: String!
  # meta: PollMeta!
  # type: PollType!
  # status: PollStatus!
  choices: [String!]!
  # nVotes: [Int!]!
  count: PollCount!
  # title: String!
  # text: String
  # start: DateTime!
  # end: DateTime!
  # nDays: Int!
  # minVotes: Int!
  # nDaysJudge: Int!
  # minJudgments: Int!
  # count: PollCount!
  # posts: [Post!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PollCount {
  id: ID!
  nVotes: [Int!]!
  # nJudgements: [Int]
  # judgeStartedAt: DateTime
  # judgeEndedAt: DateTime
  # verdictValid: Boolean
  # verdictChoice: Int
  # updatedAt: DateTime!
  # failedMsg: String
}

type UpsertBulletEmojiLikeResponse {
  like: BulletEmojiLike!
  count: BulletEmojiCount!
}

type UpsertCardEmojiLikeResponse {
  like: CardEmojiLike!
  count: CardEmojiCount!
}

type User {
  id: ID!
  email: String!
  # profileImage: String
  # trips: [Launch]!
}

type Vote {
  id: ID!
  pollId: String!
  choiceIdx: Int!
  # reward: Float
  # createdAt: DateTime!
  # updatedAt: DateTime!
}

# type PollMeta {
#   code: String
#   text: String
# }

# type CommentLike {
#   id: ID!
#   commentId: Int!
#   choice: LikeChoice!
#   createdAt: DateTime!
#   updatedAt: DateTime!
# }

# type CommentCount {
#   id: ID!
#   nViews: Int!
#   nUps: Int!
#   nDowns: Int!
# }

# type CommentLikeResponse {
#   like: CommentLike!
#   count: CommentCount!
# }

# type Comment {
#   id: ID!
#   userId: String!
#   oauthorName: String
#   status: CommentStatus!
#   content: String!

#   # 若是投票的會一起記錄
#   vote: Vote

#   count: CommentCount!
#   createdAt: DateTime!
#   updatedAt: DateTime!
# }

# type BoardLike {
#   id: ID!
#   boardId: Int!
#   choice: LikeChoice!
#   createdAt: DateTime!
#   updatedAt: DateTime!
# }

# type BoardCount {
#   id: ID!
#   nViews: Int!
#   nUps: Int!
#   nDowns: Int!
#   # nComments: Int!
# }

# type BoardLikeResponse {
#   like: BoardLike!
#   count: BoardCount!
# }

# type Board {
#  id: ID!
#  userId: String!
#  bulletId: Int
#  cardId: Int
#  status: BoardStatus!
#  hashtag: String!
#  meta: String! # json
#  content: String! # json
#  poll: Poll
#  count: BoardCount!
#  createdAt: DateTime!
#  updatedAt: DateTime!
# }

# ------ Inputs ------

input CardMetaInput {
  redirects: [String!]
  duplicates: [String!]
  url: String
  author: String
  date: String
  description: String
  keywords: [String!]
  title: String
}

# input CardTemplatePropsInput {
#   template: String!
#   title: String!
#   ticker: String
# }

input CardInput {
  symbol: String!
  # templateProps: CardTemplatePropsInput
  meta: CardMetaInput
}

input CardStateInput {
  prevStateId: String
  cardId: String
  symbol: String!
  subSymbols: [String!]!
  changes: JSON!
  finalValue: JSON! # 用於比較 applyChanges() 是否相同，不存入
  cardInput: CardInput # 當需要同時創新 card 時 (目前只適用於創 symbol-card 的情況)
}

input CommitInput {
  cardStateInputs: [CardStateInput!]!
}

input LikeInput {
  choice: LikeChoice!
}

input PollInput {
  # cat: PollCat!
  choices: [String!]!
}

input ShotInput {
  choice: ShotChoice!
  targetId: ID! # Target card id
  authorId: ID # Create author shot required
  linkId: ID # Create author shot required
}

input VoteInput {
  choiceIdx: Int!
}

# input CommentInput {
#   content: String!
#   vote: VoteInput
# }

# input BoardInput {
#   hashtag: String!
#   meta: String!
#   content: String!
# }

# ------ NEXT ------

# type Tick {
#   id: ID!
#   symbolId: Int!
#   value: Float!
#   at: DateTime!
# }

# type PollJudgment {
#   id: ID!
#   pollId: Int!
#   choice: Int!
#   comment: Comment!
#   createdAt: DateTime!
#   updatedAt: DateTime!
# }

# input PollJudgmentInput {
#   choice: Int!
# }

# type Page {
#   id: ID!
#   # null if not existed
#   createdPostId: ID
#   # symbols: [String!]
#   suggestTitle: String
#   suggestTags: [String!]!
#   suggestEvents: [String!]!
#   suggestTickers: [String!]!
#   # null if not created
#   createdEvent: Symbol
# }

# type EventContent {
#   tags: [String!]!
#   tickers: [String!]!
#   events: [String!]!
#   equalEvents: [String!]!
# }

# type PostLink {
#   url: String!
# }

# type Follow {
#   id: ID!
#   # symbol: Symbol!
#   symbolId: Int!
#   followed: Boolean!
#   # createdAt: DateTime!
#   updatedAt: DateTime!
# }

# input FollowInput {
#   symbolId: ID!
#   followed: Boolean!
# }

enum SourceType {
  VIDEO
  POST
  AUTHOR
  OTHER
}

enum CardStatus {
  ACTIVE
  ARCHIVE
  REDIRECT
  REPORTED
  DUPLICATED
}

enum EmojiCode {
  UP
  DOWN
  PIN
  REPORT
}

enum LikeChoice {
  UP
  DOWN
  NEUTRAL
}

enum PollType {
  FIXED
  ADD
  ADD_BY_POST
}

enum PollStatus {
  OPEN
  JUDGE
  CLOSE_SUCCESS
  CLOSE_FAIL
}

enum PollFailReason {
  MIN_VOTES
  MIN_JUDGMENTS
  MAJOR_VERDICT
  VERDICT_AS_FAIL
  OTHER
}

enum ShotChoice {
  LONG
  SHORT
  HOLD
}

enum SymbolType {
  TICKER
  TOPIC
  URL
}

# enum BoardStatus {
#   ACTIVE
#   LOCK
#   DELETE
#   ARCHIVE
#   REPORTED
# }

# enum CommentStatus {
#   ACTIVE
#   LOCK
#   DELETE
#   ARCHIVE
#   REPORTED
# }
